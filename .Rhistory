d <- 0
while(d <= 30){
min_sum <- min_sum + october_temps$Min.Temp[start + d]
max_sum <- max_sum + october_temps$Max.Temp[start + d]
if(october_temps$Julian[start+d] %in% harvests$harvest_jul){
row <- row.names(harvests[match(october_temps$Julian[start+d],harvests$harvest_jul),])
harvest_dates[row,3] <- min_sum/(d+1)
harvest_dates[row,4] <- max_sum/(d+1)
}
d <- d+1
}
}
#merge max and min temps
ss_data <- merge(ss_data,yearly_temps,by.x = "plant_ye", by.y="Year")
#merge october until HD max and min temps.
ss_data <- merge(ss_data,harvest_dates,
by.x=c("plant_ye","harvest_jul"),
by.y=c("plant_ye","harvest_jul"))
setwd("C:/Users/PolsinelliM/OneDrive - AGR-AGR/MatRamsayData")
# Organize climate, soil, and field data provided by Matt Ramsay
# for ML models
# Climate data from ECCC and soil data from field and CANSIS
# Created by Mariaelisa Polsinelli for AAFC, 2023
if (!require("dplyr")){
install.packages("dplyr")
}
library("dplyr")
library("readxl")
library(lubridate)
library (tidyr)
library(ggplot2)
current_path <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
#Functions----------------------------------------------------------------------
convert_jul <- function(year_col,month_col,day_col){
#converts individual day, month, year column to day of year
dates <- paste(year_col,'-',month_col,'-',day_col, sep='')
return(yday(as.Date(dates)))
}
calcCumGDD <- function(df,cnames,start_date,end_date){
#start and end dates as jul day
#df include year,min_temp,max_temp,base
start <- match()
GDD <- max((max_temp+min_temp/2)-base,0)
}
#import and clean data----------------------------------------------------------
#CLIMATE DATA
#headers name, year, month, day, julian day, tmin, tmax, radiation, total_pp, rain, wind, vapour pressure, and co2
all_clim_yrs <- data.frame()
files <- list.files(path="C:/Users/PolsinelliM/OneDrive - AGR-AGR/MatRamsayData/Climate Files/SUMMERSIDE_RF", pattern="*.*", full.names=TRUE, recursive=FALSE)
for(f in files){
x <- read.table(f)
all_clim_yrs <- rbind(all_clim_yrs,x)
}
colnames(all_clim_yrs) <- c("Station","Year","Month","Day","Julian", "Min.Temp","Max.Temp","radiation","total_pp","Precip.", "wind.speed","vap","co2")
all_clim_yrs$Year <- as.numeric(all_clim_yrs$Year)
all_clim_yrs$Date <- as.Date(paste(all_clim_yrs$Year,all_clim_yrs$Month,all_clim_yrs$Day,sep="/"))
all_clim_yrs <- all_clim_yrs[order(all_clim_yrs$Date),]
#october only (oct 1st until harvest data)
october_temps <- all_clim_yrs[all_clim_yrs$Month==10,]
harvest_dates <- unique(select(ss_data,c(33,31)))
harvest_dates$Oct.HD.Min.Temp <- NA
harvest_dates$Oct.HD.Max.Temp <- NA
setwd("C:/Users/PolsinelliM/OneDrive - AGR-AGR/Documents/Potato Yield Prediction/ML")
load("MLalone_P2051mf.RData")
#october only (oct 1st until harvest data)
october_temps <- all_clim_yrs[all_clim_yrs$Month==10,]
harvest_dates <- unique(select(ss_data,c(33,31)))
harvest_dates$Oct.HD.Min.Temp <- NA
harvest_dates$Oct.HD.Max.Temp <- NA
View(harvest_dates)
harvest_dates$Oct.HD.Min.Temp[harvest_dates$harvest_jul < 271,] <- -999
harvest_dates$Oct.HD.Min.Temp[harvest_dates$harvest_jul < 271,]
harvest_dates$Oct.HD.Min.Temp[harvest_dates$harvest_jul < 271]
harvest_dates[harvest_dates$harvest_jul < 271,]$Oct.HD.Min.Temp <- -999
harvest_dates[harvest_dates$harvest_jul <= 271,]$Oct.HD.Min.Temp <- -999
harvest_dates[harvest_dates$harvest_jul <= 271,]$Oct.HD.Max.Temp <- -999
View(harvest_dates)
View(harvest_dates)
setwd("C:/Users/PolsinelliM/OneDrive - AGR-AGR/MatRamsayData")
if (!require("dplyr")){
install.packages("dplyr")
}
library("dplyr")
library("readxl")
library(lubridate)
library (tidyr)
library(ggplot2)
current_path <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
#Functions----------------------------------------------------------------------
convert_jul <- function(year_col,month_col,day_col){
#converts individual day, month, year column to day of year
dates <- paste(year_col,'-',month_col,'-',day_col, sep='')
return(yday(as.Date(dates)))
}
calcCumGDD <- function(df,cnames,start_date,end_date){
#start and end dates as jul day
#df include year,min_temp,max_temp,base
start <- match()
GDD <- max((max_temp+min_temp/2)-base,0)
}
#import and clean data----------------------------------------------------------
#CLIMATE DATA
#headers name, year, month, day, julian day, tmin, tmax, radiation, total_pp, rain, wind, vapour pressure, and co2
all_clim_yrs <- data.frame()
files <- list.files(path="C:/Users/PolsinelliM/OneDrive - AGR-AGR/MatRamsayData/Climate Files/SUMMERSIDE_RF", pattern="*.*", full.names=TRUE, recursive=FALSE)
for(f in files){
x <- read.table(f)
all_clim_yrs <- rbind(all_clim_yrs,x)
}
colnames(all_clim_yrs) <- c("Station","Year","Month","Day","Julian", "Min.Temp","Max.Temp","radiation","total_pp","Precip.", "wind.speed","vap","co2")
all_clim_yrs$Year <- as.numeric(all_clim_yrs$Year)
all_clim_yrs$Date <- as.Date(paste(all_clim_yrs$Year,all_clim_yrs$Month,all_clim_yrs$Day,sep="/"))
all_clim_yrs <- all_clim_yrs[order(all_clim_yrs$Date),]
setwd("C:/Users/PolsinelliM/OneDrive - AGR-AGR/Documents/Potato Yield Prediction/ML")
load("MLalone_P2051mf.RData")
#calculate average monthly min. and max. temps
yearly_temps <- data.frame(Year=as.integer(unique(all_clim_yrs$Year)))
monthly_temp <- group_by(all_clim_yrs,Year,Month) %>% summarise_at(vars(Min.Temp,Max.Temp), list(mean))
monthly_temp <- as.data.frame(monthly_temp)
monthly_temp$Year <- as.integer(monthly_temp$Year)
mnames <- c("Jan","Feb","Mar","Apr","May","June","Jul","Aug","Sept","Oct","Nov","Dec")
for(i in unique(monthly_temp$Month)){
month <- monthly_temp[monthly_temp$Month == i,]
colnames(month) <- c("Year",paste("Month",i,sep="."),
paste(mnames[i],".Min.Temp",sep=""),
paste(mnames[i],".Max.Temp",sep=""))
yearly_temps <- merge(yearly_temps,month,by.x="Year",by.y="Year")
}
yearly_temps <- select(yearly_temps,-c(2,5,8,11,14,17,20,23,26,29,32,35))
#october only (oct 1st until harvest data)
october_temps <- all_clim_yrs[all_clim_yrs$Month==10,]
harvest_dates <- unique(select(ss_data,c(33,31)))
harvest_dates$Oct.HD.Min.Temp <- NA
harvest_dates$Oct.HD.Max.Temp <- NA
harvest_dates[harvest_dates$harvest_jul <= 271,]$Oct.HD.Min.Temp <- -999
harvest_dates[harvest_dates$harvest_jul <= 271,]$Oct.HD.Max.Temp <- -999
for(y in unique(harvest_dates$plant_ye)){
start <- match(y,october_temps$Year)
harvests <- harvest_dates[which(harvest_dates$plant_ye==y),]
min_sum <- 0
max_sum <- 0
d <- 0
while(d <= 30){
min_sum <- min_sum + october_temps$Min.Temp[start + d]
max_sum <- max_sum + october_temps$Max.Temp[start + d]
if(october_temps$Julian[start+d] %in% harvests$harvest_jul){
row <- row.names(harvests[match(october_temps$Julian[start+d],harvests$harvest_jul),])
harvest_dates[row,3] <- min_sum/(d+1)
harvest_dates[row,4] <- max_sum/(d+1)
}
d <- d+1
}
}
#merge max and min temps
ss_data <- merge(ss_data,yearly_temps,by.x = "plant_ye", by.y="Year")
#merge october until HD max and min temps.
ss_data <- merge(ss_data,harvest_dates,
by.x=c("plant_ye","harvest_jul"),
by.y=c("plant_ye","harvest_jul"))
remove(list=setdiff(ls(),c("ss_data","c","fields","labels")))
c <- length(ss_data)
save.image("C:/Users/PolsinelliM/OneDrive - AGR-AGR/Documents/Potato Yield Prediction/ML/MLalone_monthlyTemp.RData")
View(ss_data)
View(ss_data)
View(ss_data[,51:59])
maxtrix(c(6.6,1.0,0.0),(1.0,0.0,0.0),(0.0,0.0,0.0))
maxtrix(c(6.6,1.0,0.0),c(1.0,0.0,0.0),c(0.0,0.0,0.0))
is. maxtrix(c(c(6.6,1.0,0.0),c(1.0,0.0,0.0),c(0.0,0.0,0.0)))
is.maxtrix(c(c(6.6,1.0,0.0),c(1.0,0.0,0.0),c(0.0,0.0,0.0)))
matrix(c(6.6,1.0,0.0),c(1.0,0.0,0.0),c(0.0,0.0,0.0))
matrix(data=c(c(6.6,1.0,0.0),c(1.0,0.0,0.0),c(0.0,0.0,0.0)))
x <-matrix(data=c(c(6.6,1.0,0.0),c(1.0,0.0,0.0),c(0.0,0.0,0.0)))
View(x)
View(x)
x <-matrix(data=c(c(6.6,1.0,0.0),c(1.0,0.0,0.0),c(0.0,0.0,0.0)),row=3,col=3)
x <-matrix(data=c(c(6.6,1.0,0.0),c(1.0,0.0,0.0),c(0.0,0.0,0.0)),nrow=3,ncol=3)
ss_Data[1]
ss_data[1]
View(ss_data)
View(ss_data)
ss_data[3]
boxplot.stats(ss_data[3],coef=1.5)
boxplot.stats(as.list(ss_data[3]),coef=1.5)
z <- as.list(ss_data[3])
View(z)
View(z)
z <- as.list(ss_data[,3])
boxplot.stats(z,coef=1.5)
View(z)
View(z)
boxplot.stats(ss_data[,3],coef=1.5)
smoothEnds()
library(UBL)
setwd("C:/Users/PolsinelliM/OneDrive - AGR-AGR/Documents/Potato Yield Prediction/ML")
library(UBL)
library(DMwR)
data(algae)
#On My Data------------------------------
load("MLalone_slope-lidar2.RData")
ss_data <- subset(ss_data, select=c(1:22))
ggplot(data=ss_data) + geom_boxplot(aes(x=yield_tha))
ss_points <- boxplot.stats(y,coef=coef)
ss_points <- boxplot.stats(ss_data[,1],coef=coef)
ss_points <- boxplot.stats(ss_data[,1],coef=1.5)
View(ss_points)
View(ss_points)
#specific field
i <- 1
f <- fields[i]
train_data <- ss_data[ss_data$CFIDYr != f, 1:c]
train_data <- ss_data[ss_data$CFIDYr != f, 1:c,]
View(ss_data)
View(ss_data)
train_data <- ss_data[ss_data$CFIDYr != f,]
View(train_data)
View(train_data)
ggplot(data=ss_data) + geom_boxplot(aes(x=yield_tha))
ggplot(data=train_data) + geom_boxplot(aes(x=yield_tha))
ggplot(train_data) + geom_histogram(aes(x=yield_tha),bins=26)
rpoints <- boxplot.stats(ss_data[,1],coef=1.5)
rpoints <- boxplot.stats(train_data[,1],coef=1.5)
C.perc = list(0.5)
rel <- matrix(data=c(c(rpoints$stats[1],1.0,0.0),
c(rpoints$stats[3],0.0,0.0),
c(rpoints$stats[5],1.0,0.0)),
nrow=3,ncol=3)
View(rel)
View(rel)
matrix(data=c(c(1,2,3),c(4,5,6),c(7,8,9)),nrow=3,ncol=3)
rel <- matrix(data=t(c(c(rpoints$stats[1],1.0,0.0),
c(rpoints$stats[3],0.0,0.0),
c(rpoints$stats[5],1.0,0.0))),
nrow=3,ncol=3)
matrix(data=t(c(c(1,2,3),c(4,5,6),c(7,8,9))),nrow=3,ncol=3)
matrix(data=t(c(c(1,2,3),c(4,5,6),c(7,8,9))),nrow=3,ncol=3)
c(c(1,2,3),c(4,5,6),c(7,8,9))
rel <- t(matrix(data=c(c(rpoints$stats[1],1.0,0.0),
c(rpoints$stats[3],0.0,0.0),
c(rpoints$stats[5],1.0,0.0)),
nrow=3,ncol=3))
ss.Bal <- RandUnderRegress(yield_tha~., train_x, C.perc = "extreme", rel=rel)
ss.Bal <- RandUnderRegress(yield_tha~., train_data, C.perc = "extreme", rel=rel)
View(ss.Bal)
View(ss.Bal)
ggplot(data=ss.Bal) + geom_boxplot(aes(x=yield_tha))
ggplot(ss.Bal) + geom_density(aes(x=yield_tha))
ggplot(ss.Bal) + geom_histogram(aes(x=yield_tha),bins=26)
ss.Bal <- RandUnderRegress(yield_tha~., train_data, C.perc = 0.5, rel=rel)
ggplot(data=ss.Bal) + geom_boxplot(aes(x=yield_tha))
ggplot(ss.Bal) + geom_density(aes(x=yield_tha))
ggplot(ss.Bal) + geom_histogram(aes(x=yield_tha),bins=26)
ss.Bal <- RandUnderRegress(yield_tha~., train_data, C.perc = 0.1, rel=rel)
ggplot(data=ss.Bal) + geom_boxplot(aes(x=yield_tha))
ggplot(ss.Bal) + geom_density(aes(x=yield_tha))
ss.Bal <- RandUnderRegress(yield_tha~., train_data, C.perc = 0.3, rel=rel)
ggplot(data=ss.Bal) + geom_boxplot(aes(x=yield_tha))
ggplot(ss.Bal) + geom_density(aes(x=yield_tha))
ggplot(ss.Bal) + geom_histogram(aes(x=yield_tha),bins=26)
rel <- t(matrix(data=c(c(rpoints$stats[1],1.0,0.0),
c(rpoints$stats[3],0.0,0.0),
c(rpoints$stats[5],0.0,0.0)),
nrow=3,ncol=3))
ss.Bal <- RandUnderRegress(yield_tha~., train_data, C.perc = 0.3, rel=rel)
ggplot(data=ss.Bal) + geom_boxplot(aes(x=yield_tha))
ggplot(ss.Bal) + geom_density(aes(x=yield_tha))
ggplot(ss.Bal) + geom_histogram(aes(x=yield_tha),bins=26)
ss.Bal <- RandUnderRegress(yield_tha~., train_data, C.perc = 0.2, rel=rel)
ggplot(data=ss.Bal) + geom_boxplot(aes(x=yield_tha))
ggplot(ss.Bal) + geom_density(aes(x=yield_tha))
ggplot(ss.Bal) + geom_histogram(aes(x=yield_tha),bins=26)
rel <- t(matrix(data=c(c(rpoints$stats[1],1.0,0.0),
c(rpoints$stats[3],0.0,0.0),
c(rpoints$stats[5],0.6,0.0)),
nrow=3,ncol=3))
ss.Bal <- RandUnderRegress(yield_tha~., train_data, C.perc = 0.2, rel=rel)
ggplot(data=ss.Bal) + geom_boxplot(aes(x=yield_tha))
ggplot(ss.Bal) + geom_density(aes(x=yield_tha))
ggplot(ss.Bal) + geom_histogram(aes(x=yield_tha),bins=26)
rel <- t(matrix(data=c(c(rpoints$stats[1],1.0,0.0),
c(rpoints$stats[3],0.0,0.0),
c(rpoints$stats[5],0.5,0.0)),
nrow=3,ncol=3))
ss.Bal <- RandUnderRegress(yield_tha~., train_data, C.perc = 0.2, rel=rel)
ggplot(data=ss.Bal) + geom_boxplot(aes(x=yield_tha))
ggplot(ss.Bal) + geom_density(aes(x=yield_tha))
ggplot(ss.Bal) + geom_histogram(aes(x=yield_tha),bins=26)
load("MLalone_slope-lidar2.RData")
View(ss_data)
View(ss_data)
# Organize climate, soil, and field data provided by Matt Ramsay
# for ML models
# Climate data from ECCC and soil data from field and CANSIS
# Created by Mariaelisa Polsinelli for AAFC, 2023
if (!require("dplyr")){
install.packages("dplyr")
}
library("dplyr")
library("readxl")
library(lubridate)
library (tidyr)
library(ggplot2)
current_path <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
#Functions----------------------------------------------------------------------
convert_jul <- function(year_col,month_col,day_col){
#converts individual day, month, year column to day of year
dates <- paste(year_col,'-',month_col,'-',day_col, sep='')
return(yday(as.Date(dates)))
}
calcCumGDD <- function(df,cnames,start_date,end_date){
#start and end dates as jul day
#df include year,min_temp,max_temp,base
start <- match()
GDD <- max((max_temp+min_temp/2)-base,0)
}
#import and clean data----------------------------------------------------------
#CLIMATE DATA
#headers name, year, month, day, julian day, tmin, tmax, radiation, total_pp, rain, wind, vapour pressure, and co2
all_clim_yrs <- data.frame()
files <- list.files(path="C:/Users/PolsinelliM/OneDrive - AGR-AGR/MatRamsayData/Climate Files/SUMMERSIDE_RF", pattern="*.*", full.names=TRUE, recursive=FALSE)
for(f in files){
x <- read.table(f)
all_clim_yrs <- rbind(all_clim_yrs,x)
}
colnames(all_clim_yrs) <- c("Station","Year","Month","Day","Julian", "Min.Temp","Max.Temp","radiation","total_pp","Precip.", "wind.speed","vap","co2")
all_clim_yrs$Year <- as.numeric(all_clim_yrs$Year)
all_clim_yrs$Date <- as.Date(paste(all_clim_yrs$Year,all_clim_yrs$Month,all_clim_yrs$Day,sep="/"))
all_clim_yrs <- all_clim_yrs[order(all_clim_yrs$Date),]
#calculate cumulative growing season GDD, precip. and radiation
j <- 1
for (y in unique(all_clim_yrs$Year)){
i <- which(all_clim_yrs$Year==y & all_clim_yrs$Month==5 & all_clim_yrs$Day == 1)
while(all_clim_yrs$Year[j] == y){
if (all_clim_yrs$Month[j] >= 5 & all_clim_yrs$Month[j] <= 11){
all_clim_yrs$GDDcum_gs[j] <- sum(all_clim_yrs$GDD[i:j])
all_clim_yrs$precip_gs[j] <- sum(all_clim_yrs$Precip.[i:j])
all_clim_yrs$rad_gs[j] <- sum(all_clim_yrs$radiation[i:j])
} else{
all_clim_yrs$GDDcum_gs[j] <- 0
all_clim_yrs$precip_gs[j] <- 0
all_clim_yrs$rad_gs[j] <- 0
}
j <- j + 1
}
}
setwd("C:/Users/PolsinelliM/OneDrive - AGR-AGR/MatRamsayData")
if (!require("dplyr")){
install.packages("dplyr")
}
library("dplyr")
library("readxl")
library(lubridate)
library (tidyr)
library(ggplot2)
current_path <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(current_path))
#Functions----------------------------------------------------------------------
convert_jul <- function(year_col,month_col,day_col){
#converts individual day, month, year column to day of year
dates <- paste(year_col,'-',month_col,'-',day_col, sep='')
return(yday(as.Date(dates)))
}
calcCumGDD <- function(df,cnames,start_date,end_date){
#start and end dates as jul day
#df include year,min_temp,max_temp,base
start <- match()
GDD <- max((max_temp+min_temp/2)-base,0)
}
#import and clean data----------------------------------------------------------
#CLIMATE DATA
#headers name, year, month, day, julian day, tmin, tmax, radiation, total_pp, rain, wind, vapour pressure, and co2
all_clim_yrs <- data.frame()
files <- list.files(path="C:/Users/PolsinelliM/OneDrive - AGR-AGR/MatRamsayData/Climate Files/SUMMERSIDE_RF", pattern="*.*", full.names=TRUE, recursive=FALSE)
for(f in files){
x <- read.table(f)
all_clim_yrs <- rbind(all_clim_yrs,x)
}
colnames(all_clim_yrs) <- c("Station","Year","Month","Day","Julian", "Min.Temp","Max.Temp","radiation","total_pp","Precip.", "wind.speed","vap","co2")
all_clim_yrs$Year <- as.numeric(all_clim_yrs$Year)
all_clim_yrs$Date <- as.Date(paste(all_clim_yrs$Year,all_clim_yrs$Month,all_clim_yrs$Day,sep="/"))
all_clim_yrs <- all_clim_yrs[order(all_clim_yrs$Date),]
setwd("C:/Users/PolsinelliM/OneDrive - AGR-AGR/Documents/Potato Yield Prediction/ML")
load("MLalone_slope-lidar2.RData")
#calculate average monthly min. and max. temps
yearly_temps <- data.frame(Year=as.integer(unique(all_clim_yrs$Year)))
monthly_temp <- group_by(all_clim_yrs,Year,Month) %>% summarise_at(vars(Min.Temp,Max.Temp), list(mean))
monthly_temp <- as.data.frame(monthly_temp)
monthly_temp$Year <- as.integer(monthly_temp$Year)
mnames <- c("Jan","Feb","Mar","Apr","May","June","Jul","Aug","Sept","Oct","Nov","Dec")
for(i in unique(monthly_temp$Month)){
month <- monthly_temp[monthly_temp$Month == i,]
colnames(month) <- c("Year",paste("Month",i,sep="."),
paste(mnames[i],".Min.Temp",sep=""),
paste(mnames[i],".Max.Temp",sep=""))
yearly_temps <- merge(yearly_temps,month,by.x="Year",by.y="Year")
}
yearly_temps <- select(yearly_temps,-c(2,5,8,11,14,17,20,23,26,29,32,35))
#october only (oct 1st until harvest data)
october_temps <- all_clim_yrs[all_clim_yrs$Month==10,]
harvest_dates <- unique(select(ss_data,c(33,31)))
harvest_dates$Oct.HD.Min.Temp <- NA
harvest_dates$Oct.HD.Max.Temp <- NA
harvest_dates[harvest_dates$harvest_jul <= 271,]$Oct.HD.Min.Temp <- -999
View(harvest_dates)
View(harvest_dates)
#october only (oct 1st until harvest data)
october_temps <- all_clim_yrs[all_clim_yrs$Month==10,]
View(october_temps)
View(october_temps)
harvest_dates <- unique(select(ss_data,c(33,31)))
View(harvest_dates)
View(harvest_dates)
View(ss_data)
View(ss_data)
harvest_dates <- unique(select(ss_data,c(3,41)))
View(harvest_dates)
View(harvest_dates)
harvest_dates$Oct.HD.Min.Temp <- NA
harvest_dates$Oct.HD.Max.Temp <- NA
harvest_dates[harvest_dates$harvest_jul <= 271,]$Oct.HD.Min.Temp <- -999
harvest_dates[harvest_dates$harvest_jul <= 271,]$Oct.HD.Max.Temp <- -999
for(y in unique(harvest_dates$plant_ye)){
start <- match(y,october_temps$Year)
harvests <- harvest_dates[which(harvest_dates$plant_ye==y),]
min_sum <- 0
max_sum <- 0
d <- 0
while(d <= 30){
min_sum <- min_sum + october_temps$Min.Temp[start + d]
max_sum <- max_sum + october_temps$Max.Temp[start + d]
if(october_temps$Julian[start+d] %in% harvests$harvest_jul){
row <- row.names(harvests[match(october_temps$Julian[start+d],harvests$harvest_jul),])
harvest_dates[row,3] <- min_sum/(d+1)
harvest_dates[row,4] <- max_sum/(d+1)
}
d <- d+1
}
}
#merge max and min temps
ss_data <- merge(ss_data,yearly_temps,by.x = "plant_ye", by.y="Year")
#merge october until HD max and min temps.
ss_data <- merge(ss_data,harvest_dates,
by.x=c("plant_ye","harvest_jul"),
by.y=c("plant_ye","harvest_jul"))
remove(list=setdiff(ls(),c("ss_data","c","fields","labels")))
View(ss_data)
View(ss_data)
c <- length(ss_data)
save.image("C:/Users/PolsinelliM/OneDrive - AGR-AGR/Documents/Potato Yield Prediction/ML/MLalone_monthlyTemp.RData")
View(ss_data)
View(ss_data)
ss_data[,7]-(ss_data[,14:19])
ss_data[,7]-sum(ss_data[,14:19])
sum(ss_data[,14:19])
ss_data[,7]-(ss_data[,14]+ss_data[,15]+ss_data[,16]+ss_data[,17]+ss_data[,18]+ss_data[,19])
#add october to HD GDD
ss_data$Oct.HD.GDD <- ss_data[,7]-(ss_data[,14]+ss_data[,15]+ss_data[,16]+ss_data[,17]+ss_data[,18]+ss_data[,19])
View(ss_data)
View(ss_data)
View(ss_data[,100:111])
View(ss_data[ss_data$harvest_jul<271,])
View(ss_data[ss_data$harvest_jul<=271,])
View(ss_data[ss_data$harvest_jul<=271,111])
ss_data[ss_data$harvest_jul<=271,111] <- -999
View(ss_data[ss_data$harvest_jul<=271,111])
c <- length(ss_data)
save.image("C:/Users/PolsinelliM/OneDrive - AGR-AGR/Documents/Potato Yield Prediction/ML/MLalone_monthlyTemp2.RData")
#specific field
i <- 1
f <- fields[i]
train_data <- ss_data[ss_data$CFIDYr != f,]
ggplot(data=train_data) + geom_boxplot(aes(x=yield_tha))
ggplot(train_data) + geom_histogram(aes(x=yield_tha),bins=26)
rpoints <- boxplot.stats(train_data[,1],coef=1.5)
C.perc = list(0.5)
rel <- t(matrix(data=c(c(rpoints$stats[1],1.0,0.0),
c(rpoints$stats[3],0.0,0.0),
c(rpoints$stats[5],0.5,0.0)),
nrow=3,ncol=3))
ss.Bal <- RandUnderRegress(yield_tha~., train_data, C.perc = 0.2, rel=rel)
rel
View(ss_data)
View(ss_data)
rpoints <- boxplot.stats(train_data[,3],coef=1.5)
C.perc = list(0.5)
rel <- t(matrix(data=c(c(rpoints$stats[1],1.0,0.0),
c(rpoints$stats[3],0.0,0.0),
c(rpoints$stats[5],0.5,0.0)),
nrow=3,ncol=3))
ss.Bal <- RandUnderRegress(yield_tha~., train_data, C.perc = 0.2, rel=rel)
View(ss.Bal)
View(ss.Bal)
ggplot(data=ss.Bal) + geom_boxplot(aes(x=yield_tha))
ggplot(ss.Bal) + geom_density(aes(x=yield_tha))
ggplot(ss.Bal) + geom_histogram(aes(x=yield_tha),bins=26)
rel <- t(matrix(data=c(c(rpoints$stats[1],1.0,0.0),
c(rpoints$stats[3],0.0,0.0),
c(rpoints$stats[5],1.0,0.0)),
nrow=3,ncol=3))
ss.Bal <- RandUnderRegress(yield_tha~., train_data, C.perc = 0.2, rel=rel)
ggplot(ss.Bal) + geom_histogram(aes(x=yield_tha),bins=26)
ggplot(ss.Bal) + geom_density(aes(x=yield_tha))
rel <- t(matrix(data=c(c(rpoints$stats[1],1.0,0.0),
c(rpoints$stats[3],0.0,0.0),
c(rpoints$stats[5],0.5,0.0)),
nrow=3,ncol=3))
ss.Bal <- RandUnderRegress(yield_tha~., train_data, C.perc = 0.2, rel=rel)
ggplot(data=ss.Bal) + geom_boxplot(aes(x=yield_tha))
ggplot(ss.Bal) + geom_density(aes(x=yield_tha))
ggplot(ss.Bal) + geom_histogram(aes(x=yield_tha),bins=26)
